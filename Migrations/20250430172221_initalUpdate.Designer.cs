// <auto-generated />
using System;
using Library_ManagementSystem.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Library_ManagementSystem.Migrations
{
    [DbContext(typeof(ApplicationDbcontext))]
    [Migration("20250430172221_initalUpdate")]
    partial class initalUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Library_ManagementSystem.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("img_url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            Author = "F. Scott Fitzgerald",
                            Genre = "Fiction",
                            ISBN = "9780743273565",
                            Quantity = 5,
                            Title = "The Great Gatsby",
                            img_url = "images/Books/the-great-gatsby.jpg"
                        },
                        new
                        {
                            BookId = 2,
                            Author = "George Orwell",
                            Genre = "Dystopian",
                            ISBN = "9780451524935",
                            Quantity = 10,
                            Title = "1984",
                            img_url = "images/Books/1984.jpg"
                        },
                        new
                        {
                            BookId = 3,
                            Author = "Harper Lee",
                            Genre = "Fiction",
                            ISBN = "9780061120084",
                            Quantity = 8,
                            Title = "To Kill a Mockingbird",
                            img_url = "images/Books/to-kill-a-mockingbird.jpg"
                        },
                        new
                        {
                            BookId = 4,
                            Author = "Jane Austen",
                            Genre = "Romance",
                            ISBN = "9780141439518",
                            Quantity = 3,
                            Title = "Pride and Prejudice",
                            img_url = "images/Books/pride-and-prejudice.jpg"
                        },
                        new
                        {
                            BookId = 5,
                            Author = "Herman Melville",
                            Genre = "Adventure",
                            ISBN = "9781503280786",
                            Quantity = 7,
                            Title = "Moby Dick",
                            img_url = "images/Books/moby-dick.jpg"
                        },
                        new
                        {
                            BookId = 6,
                            Author = "J.D. Salinger",
                            Genre = "Fiction",
                            ISBN = "9780316769488",
                            Quantity = 4,
                            Title = "The Catcher in the Rye",
                            img_url = "images/Books/the-catcher-in-the- rey.jpg"
                        },
                        new
                        {
                            BookId = 7,
                            Author = "Aldous Huxley",
                            Genre = "Dystopian",
                            ISBN = "9780060850524",
                            Quantity = 6,
                            Title = "Brave New World",
                            img_url = "images/Books/brave-new-world.jpg"
                        },
                        new
                        {
                            BookId = 8,
                            Author = "Fyodor Dostoevsky",
                            Genre = "Philosophy",
                            ISBN = "9780486415871",
                            Quantity = 3,
                            Title = "Crime and Punishment",
                            img_url = "images/Books/crime-and-punishment.jpeg"
                        },
                        new
                        {
                            BookId = 9,
                            Author = "Leo Tolstoy",
                            Genre = "Historical",
                            ISBN = "9780140447934",
                            Quantity = 5,
                            Title = "War and Peace",
                            img_url = "images/Books/war-and-peace.jpg"
                        },
                        new
                        {
                            BookId = 10,
                            Author = "Homer",
                            Genre = "Epic",
                            ISBN = "9780140268867",
                            Quantity = 2,
                            Title = "The Odyssey",
                            img_url = "images/Books/odysessy.jpg"
                        },
                        new
                        {
                            BookId = 11,
                            Author = "J.R.R. Tolkien",
                            Genre = "Fantasy",
                            ISBN = "9780345339683",
                            Quantity = 9,
                            Title = "The Hobbit",
                            img_url = "images/Books/the-hobit.jpg"
                        },
                        new
                        {
                            BookId = 12,
                            Author = "J.R.R. Tolkien",
                            Genre = "Fantasy",
                            ISBN = "9780618640157",
                            Quantity = 10,
                            Title = "The Lord of the Rings",
                            img_url = "images/Books/the-lord-of-the-rings.jpg"
                        },
                        new
                        {
                            BookId = 13,
                            Author = "Ray Bradbury",
                            Genre = "Dystopian",
                            ISBN = "9781451673319",
                            Quantity = 6,
                            Title = "Fahrenheit 451",
                            img_url = "images/Books/Fahrenheit451.jpg"
                        },
                        new
                        {
                            BookId = 14,
                            Author = "Oscar Wilde",
                            Genre = "Philosophical",
                            ISBN = "9780141439570",
                            Quantity = 4,
                            Title = "The Picture of Dorian Gray",
                            img_url = "images/Books/the-picture-of-dorian-gray.jpg"
                        });
                });

            modelBuilder.Entity("Library_ManagementSystem.Models.BookRequest", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("BookId");

                    b.ToTable("BookRequests");
                });

            modelBuilder.Entity("Library_ManagementSystem.Models.BorrowedBook", b =>
                {
                    b.Property<int>("BorrowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BorrowId"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BorrowDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BorrowId");

                    b.HasIndex("BookId");

                    b.ToTable("BorrowedBooks");
                });

            modelBuilder.Entity("Library_ManagementSystem.Models.Librarian", b =>
                {
                    b.Property<int>("LibrarianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LibrarianId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LibrarianId");

                    b.ToTable("librarians");

                    b.HasData(
                        new
                        {
                            LibrarianId = 1,
                            Email = "niteshrestha00@gmail.com",
                            PasswordHash = "12345",
                            Username = "Nitesh Shrestha"
                        });
                });

            modelBuilder.Entity("Library_ManagementSystem.Models.Member", b =>
                {
                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemberId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("MemberId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("Library_ManagementSystem.Models.BookRequest", b =>
                {
                    b.HasOne("Library_ManagementSystem.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Library_ManagementSystem.Models.BorrowedBook", b =>
                {
                    b.HasOne("Library_ManagementSystem.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });
#pragma warning restore 612, 618
        }
    }
}
